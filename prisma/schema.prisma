generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  email           String           @unique
  password        String
  name            String
  coins           Int @default(0)
  rank            Int @default(0)
  solvedQuestions SolvedQuestion[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model QuizCategory {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique // e.g., AWS, Azure, Google Cloud
  img      String?
  sections Section[]
  exams    Exams[]
}

model Section {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String // e.g., Daily Quiz, Certification, Practice
  quizCategory   QuizCategory @relation(fields: [quizCategoryId], references: [id])
  quizCategoryId String       @db.ObjectId
  services       Service[]
}

model Service {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String // e.g., Compute Service, Database Service
  section   Section    @relation(fields: [sectionId], references: [id])
  sectionId String     @db.ObjectId
  topics    Topic[]
  questions Question[]
}

model Topic {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String // e.g., S3, EC2
  service   Service    @relation(fields: [serviceId], references: [id])
  serviceId String     @db.ObjectId
  questions Question[]
}

model Exams {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  fname          String // e.g., AWS Certified Solutions Architect â€“ Associate
  sname          String // e.g., SAA
  quizCategory   QuizCategory @relation(fields: [quizCategoryId], references: [id])
  quizCategoryId String       @db.ObjectId
  questions      Question[]
}

model Question {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  question       String
  options        String[] // Array of options
  correct_answer String // The correct answer
  weightage      Int // Weightage of the question

  type   Service  @relation(fields: [typeId], references: [id])
  typeId String[] @db.ObjectId

  exams   Exams    @relation(fields: [examsId], references: [id])
  examsId String[] @db.ObjectId

  topics   Topic    @relation(fields: [topicsId], references: [id])
  topicsId String[] @db.ObjectId

  solvedQuestion SolvedQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SolvedQuestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
  isCorrect  Boolean
  solvedAt   DateTime @default(now())
}
